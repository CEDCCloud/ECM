#!/bin/bash
HOSTIP=$(hostname -I | awk '{print $1}')
##################
# ELASTIQ CONFIG #
##################
EC2_ACCESS_KEY=access-key
EC2_SECRET_KEY=secret-key
EC2_URL=ec2-url
MAX_VMS=max-vms
MIN_VMS=min-vms
FLAVOR=instance-flavor
IMAGE_ID=image-id
JOBS_PER_VM=jobs-per-vm
IDLE_TIME=idle-time
KEY_NAME=key-name

###########
# CA CERT #
###########
cat<< EOF >/tmp/cacerts.txt

-----BEGIN CERTIFICATE-----
MIIF+TCCA+GgAwIBAgIRALD/zzodgkSYFWKdZIhqQWUwDQYJKoZIhvcNAQEMBQAw
gYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpOZXcgSmVyc2V5MRQwEgYDVQQHEwtK
ZXJzZXkgQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMS4wLAYD
VQQDEyVVU0VSVHJ1c3QgUlNBIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTE0
MTAwOTAwMDAwMFoXDTI0MTAwODIzNTk1OVowZDELMAkGA1UEBhMCTkwxFjAUBgNV
BAgTDU5vb3JkLUhvbGxhbmQxEjAQBgNVBAcTCUFtc3RlcmRhbTEPMA0GA1UEChMG
VEVSRU5BMRgwFgYDVQQDEw9URVJFTkEgU1NMIENBIDIwggEiMA0GCSqGSIb3DQEB
AQUAA4IBDwAwggEKAoIBAQCwOm1/qbgAnvOFOghkLPlEDCC0sxVNBi2m8JPJSL73
ZK2kjhWzMYEUF/xu4osZdYs2Es8HbXZ4Jl4nvywWukL73R5Qj2SvdZsKOoKpMSVR
jn/EQt0fXJORu5T6cFf65/24uGjKm2oZJFQ3/jJhifciwY9j1dFpfklNvNfQ20zW
9g+9wYhCk9aR+Z+WmRHqbnLngCFs8U6O7GO4Pa9lOdCFkip5Og7W6K2bJYmi1C5y
a3Oh0uLfzlhw/8BUAXdd+XadL0PaoibdHUKaTTixVv46tMtrbPJqnz+zrjun0BU+
rCd/G/RZYFBWfp11JZ4/xna//5nM2PGpaolf3ucHzY2LAgMBAAGjggF/MIIBezAf
BgNVHSMEGDAWgBRTeb9aqitKz1SA4dibwJ3ysgNmyzAdBgNVHQ4EFgQUW9CKHJoy
W+C13ZZUG+GGKLD9tr0wDgYDVR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8C
AQAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCwGA1UdIAQlMCMwDQYL
KwYBBAGyMQECAh0wCAYGZ4EMAQIBMAgGBmeBDAECAjBQBgNVHR8ESTBHMEWgQ6BB
hj9odHRwOi8vY3JsLnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNBQ2VydGlmaWNh
dGlvbkF1dGhvcml0eS5jcmwwdgYIKwYBBQUHAQEEajBoMD8GCCsGAQUFBzAChjNo
dHRwOi8vY3J0LnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNBQWRkVHJ1c3RDQS5j
cnQwJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnVzZXJ0cnVzdC5jb20wDQYJKoZI
hvcNAQEMBQADggIBAH2QaWZWVBxrPK5/JQgT6btkbPVniC+9wVEKrtNj9i3bcDEJ
AH4di9rkMyGY4CGT28COJY5VBswqZeMD6FlyJ643mph8wvQTWhJxLW2r3zJpgacG
oosgHaiQ0iiqYdT2/6W/hoCOZ5EqIn4dlC0aYbsgIZCJ6NUKEQr2CLpeG8tsKIU+
xRYPZf230bFhwaYl2Ia/Dvqb+tH1IqdnuBUu+Qitt3UCOfQpYfm/wKoX60LeJo+d
ZWQyB95sPTLTA+xH1XRpIDp+uHDvqaIqnFVCtuM+i9j/Jlr7fCZsiIWG15M+UPhE
h9RQ0R1DMDK60rqNIQjK9+7Gbs6SWQgcU3N0j5z4160avk1G7qzEuYHrp1DMHWb8
Dg1+Bh24DtN+u5qHrgu2m4QEzsGgexbfArIYQ62ruSYJq6oEHVA37iq9IkGKALXc
n8MF1OaCTGfaKwL1ZaxZKbt6DE5Ut9I7fQM7IGTGxehQKpKwX6BHl3JYX8EKb5/1
PQnV5whodZLi1biej76NGztDjPNO1VSrdu3MUH8ume20tUn643V9ixFoDdU6+l1Q
sCuBA3gstNuPv0xAW5KjohoKQV2sV/puV070B1XrYwgykwAkSl2dwsFSKJPByCQa
ppP7zX0/pnO8z2ideWMu5yUrQjg2sQtWwopf965KMdnfagbNL6OYCbwFgBPH
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFdzCCBF+gAwIBAgIQE+oocFv07O0MNmMJgGFDNjANBgkqhkiG9w0BAQwFADBv
MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFk
ZFRydXN0IEV4dGVybmFsIFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBF
eHRlcm5hbCBDQSBSb290MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFow
gYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpOZXcgSmVyc2V5MRQwEgYDVQQHEwtK
ZXJzZXkgQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMS4wLAYD
VQQDEyVVU0VSVHJ1c3QgUlNBIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgBJlFzYOw9sIs9CsVw127c0n00yt
UINh4qogTQktZAnczomfzD2p7PbPwdzx07HWezcoEStH2jnGvDoZtF+mvX2do2NC
tnbyqTsrkfjib9DsFiCQCT7i6HTJGLSR1GJk23+jBvGIGGqQIjy8/hPwhxR79uQf
jtTkUcYRZ0YIUcuGFFQ/vDP+fmyc/xadGL1RjjWmp2bIcmfbIWax1Jt4A8BQOujM
8Ny8nkz+rwWWNR9XWrf/zvk9tyy29lTdyOcSOk2uTIq3XJq0tyA9yn8iNK5+O2hm
AUTnAU5GU5szYPeUvlM3kHND8zLDU+/bqv50TmnHa4xgk97Exwzf4TKuzJM7UXiV
Z4vuPVb+DNBpDxsP8yUmazNt925H+nND5X4OpWaxKXwyhGNVicQNwZNUMBkTrNN9
N6frXTpsNVzbQdcS2qlJC9/YgIoJk2KOtWbPJYjNhLixP6Q5D9kCnusSTJV882sF
qV4Wg8y4Z+LoE53MW4LTTLPtW//e5XOsIzstAL81VXQJSdhJWBp/kjbmUZIO8yZ9
HE0XvMnsQybQv0FfQKlERPSZ51eHnlAfV1SoPv10Yy+xUGUJ5lhCLkMaTLTwJUdZ
+gQek9QmRkpQgbLevni3/GcV4clXhB4PY9bpYrrWX1Uu6lzGKAgEJTm4Diup8kyX
HAc/DVL17e8vgg8CAwEAAaOB9DCB8TAfBgNVHSMEGDAWgBStvZh6NLQm9/rEJlTv
A73gJMtUGjAdBgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/
BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wEQYDVR0gBAowCDAGBgRVHSAAMEQGA1Ud
HwQ9MDswOaA3oDWGM2h0dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9BZGRUcnVzdEV4
dGVybmFsQ0FSb290LmNybDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0
dHA6Ly9vY3NwLnVzZXJ0cnVzdC5jb20wDQYJKoZIhvcNAQEMBQADggEBAJNl9jeD
lQ9ew4IcH9Z35zyKwKoJ8OkLJvHgwmp1ocd5yblSYMgpEg7wrQPWCcR23+WmgZWn
RtqCV6mVksW2jwMibDN3wXsyF24HzloUQToFJBv2FAY7qCUkDrvMKnXduXBBP3zQ
YzYhBx9G/2CkkeFnvN4ffhkUyWNnkepnB2u0j4vAbkN9w6GAbLIevFOFfdyQoaS8
Le9Gclc1Bb+7RrtubTeZtv8jkpHGbkD4jylW6l/VXxRTrPBPYer3IsynVgviuDQf
Jtl7GQVoP7o81DgGotPmjw7jtHFtQELFhLRAlSv0ZaBIefYdgWOWnU914Ph85I6p
0fKtirOMxyHNwu8=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU
MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs
IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290
MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux
FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h
bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v
dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt
H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9
uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX
mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX
a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN
E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0
WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD
VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0
Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU
cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx
IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN
AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH
YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5
6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC
Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX
c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a
mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=
-----END CERTIFICATE-----

EOF
#################
# CONDOR CONFIG #
#################
cat << EOF >/tmp/Cluster 
###############
# $SO Cluster #
###############
SEC_DAEMON_AUTHENTICATION = required
SEC_DAEMON_INTEGRITY = required
SEC_DAEMON_AUTHENTICATION_METHODS = password
SEC_CLIENT_AUTHENTICATION_METHODS = password,fs,gsi,kerberos
SEC_PASSWORD_FILE = /etc/condor/condor_credential
SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = True

ALLOW_DAEMON = condor_pool@*, submit-side@matchsession
## Short description: Change this to an appropriate name (30 chr. limit)
COLLECTOR_NAME = CernVM cluster at \$(CONDOR_HOST)
##  Sets how often the condor_negotiator starts a negotiation cycle.
##  It is defined in seconds and defaults to 60 (1 minute).
NEGOTIATOR_INTERVAL = 20
##  When is this machine willing to start a job?
START = TRUE
##  When to suspend a job?
SUSPEND = FALSE
##  When to nicely stop a job?
##  (as opposed to killing it instantaneously)
PREEMPT = FALSE
##  When to instantaneously kill a preempting job
##  (e.g. if a job is in the pre-empting stage for too long)
KILL = FALSE
##  Disable UID_DOMAIN check when submit a job
TRUST_UID_DOMAIN = TRUE

##  Use TCP instead of UDP, and cache TCP sockets
##  (more reliable on some cloud networks)
UPDATE_COLLECTOR_WITH_TCP = True
COLLECTOR_SOCKET_CACHE_SIZE = 1000

## Avoid crashes of the collector
CONDOR_DEVELOPERS_COLLECTOR = NONE
EOF
###############
# TEST SCRIPT #
###############
cat <<EOF> /tmp/test.sh
#!/bin/bash
HOST=\$(hostname -I | awk '{print $1}')
DIR=\$(pwd)
sleep 5
echo "I'm sleeping in \$HOST"
echo ":-("
echo "More precisely in this directory \$DIR" 
echo ":-/"
sleep 20
echo "Now I'm running! So fun! :-)"
EOF
############################
# MASTER NODE INSTALLATION #
############################
##########
# UBUNTU #
##########
echo "deb http://research.cs.wisc.edu/htcondor/ubuntu/stable/ trusty contrib" >> /etc/apt/sources.list
wget -qO - http://research.cs.wisc.edu/htcondor/ubuntu/HTCondor-Release.gpg.key | apt-key add -
apt-get update
apt-get -y install condor
#
CUID=$(id condor | awk '{print $1}'| cut -d'=' -f2|cut -d'(' -f1)
CGID=$(id condor | awk '{print $2}'| cut -d'=' -f2|cut -d'(' -f1)
#
cat << EOF >/etc/condor/condor_config.local

DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD
CONDOR_HOST = $HOSTIP
CONDOR_ADMIN = root@$HOSTIP

# Preserve UID of submitting user
UID_DOMAIN = *
TRUST_UID_DOMAIN = True
SOFT_UID_DOMAIN = True

CONDOR_IDS = $CUID.$CGID
QUEUE_SUPER_USERS = root, condor
HIGHPORT = 42000
LOWPORT = 41000
EOF
#
cat /tmp/Cluster > /etc/condor/config.d/Ubuntu
#
/usr/sbin/condor_store_cred -p 12345 add -f /etc/condor/condor_credential
#
service condor start
#
apt-get install -y python-boto
wget https://github.com/dberzano/elastiq/releases/download/v0.9.10/python-elastiq_0.9.10-1py27_all.deb
dpkg -i python-elastiq_0.9.10-1py27_all.deb
#
cat /tmp/cacerts.txt >> /usr/lib/python2.7/dist-packages/boto/cacerts/cacerts.txt
#
cat<< EOF >/etc/elastiq.conf 
[elastiq]
check_queue_every_s = 45
idle_for_time_s = $IDLE_TIME
waiting_jobs_time_s = 45
n_jobs_per_vm = $JOBS_PER_VM
batch_plugin = htcondor
estimated_vm_deploy_time_s = 1200
check_vms_every_s = 45

[ec2]
flavour = $FLAVOR
api_url = $EC2_URL
user_data_b64 = IyEvYmluL2Jhc2gNCkhPU1RJUD0kKGhvc3RuYW1lIC1JIHwgYXdrICd7cHJpbnQgJDF9JykNCiMNCmVjaG8gImRlYiBodHRwOi8vcmVzZWFyY2guY3Mud2lzYy5lZHUvaHRjb25kb3IvdWJ1bnR1L3N0YWJsZS8gdHJ1c3R5IGNvbnRyaWIiID4+IC9ldGMvYXB0L3NvdXJjZXMubGlzdA0Kd2dldCAtcU8gLSBodHRwOi8vcmVzZWFyY2guY3Mud2lzYy5lZHUvaHRjb25kb3IvdWJ1bnR1L0hUQ29uZG9yLVJlbGVhc2UuZ3BnLmtleSB8IGFwdC1rZXkgYWRkIC0NCmFwdC1nZXQgdXBkYXRlDQpzbGVlcCA1DQphcHQtZ2V0IC15IGluc3RhbGwgY29uZG9yDQojDQpDVUlEPSQoaWQgY29uZG9yIHwgYXdrICd7cHJpbnQgJDF9J3wgY3V0IC1kJz0nIC1mMnxjdXQgLWQnKCcgLWYxKQ0KQ0dJRD0kKGlkIGNvbmRvciB8IGF3ayAne3ByaW50ICQyfSd8IGN1dCAtZCc9JyAtZjJ8Y3V0IC1kJygnIC1mMSkNCiMNCmNhdCA8PCBFT0YgPi9ldGMvY29uZG9yL2NvbmRvcl9jb25maWcubG9jYWwNCkRBRU1PTl9MSVNUID0gTUFTVEVSLCBTVEFSVEQNCkNPTkRPUl9IT1NUID0gJWlwdjQlDQpDT05ET1JfQURNSU4gPSByb290QCVpcHY0JQ0KDQojIFByZXNlcnZlIFVJRCBvZiBzdWJtaXR0aW5nIHVzZXINClVJRF9ET01BSU4gPSAqDQpUUlVTVF9VSURfRE9NQUlOID0gVHJ1ZQ0KU09GVF9VSURfRE9NQUlOID0gVHJ1ZQ0KDQpDT05ET1JfSURTID0gJENVSUQuJENHSUQNClFVRVVFX1NVUEVSX1VTRVJTID0gcm9vdCwgY29uZG9yDQpISUdIUE9SVCA9IDQyMDAwDQpMT1dQT1JUID0gNDEwMDANCk5FVFdPUktfSU5URVJGQUNFID0gJEhPU1RJUA0KTk9fRE5TID0gVHJ1ZQ0KREVGQVVMVF9ET01BSU5fTkFNRSA9IElORk4tUEQNCkVPRg0KIw0KY2F0IDw8RU9GPiAvZXRjL2NvbmRvci9jb25maWcuZC9VYnVudHUNCiMjIyMjIyMjIyMjIyMjIyMjIw0KIyBVYnVudHUgQ2x1c3RlciAjDQojIyMjIyMjIyMjIyMjIyMjIyMNClNFQ19EQUVNT05fQVVUSEVOVElDQVRJT04gPSByZXF1aXJlZA0KU0VDX0RBRU1PTl9JTlRFR1JJVFkgPSByZXF1aXJlZA0KU0VDX0RBRU1PTl9BVVRIRU5USUNBVElPTl9NRVRIT0RTID0gcGFzc3dvcmQNClNFQ19DTElFTlRfQVVUSEVOVElDQVRJT05fTUVUSE9EUyA9IHBhc3N3b3JkLGZzLGdzaSxrZXJiZXJvcw0KU0VDX1BBU1NXT1JEX0ZJTEUgPSAvZXRjL2NvbmRvci9jb25kb3JfY3JlZGVudGlhbA0KU0VDX0VOQUJMRV9NQVRDSF9QQVNTV09SRF9BVVRIRU5USUNBVElPTiA9IFRydWUNCg0KQUxMT1dfREFFTU9OID0gY29uZG9yX3Bvb2xAKiwgc3VibWl0LXNpZGVAbWF0Y2hzZXNzaW9uDQojIyBTaG9ydCBkZXNjcmlwdGlvbjogQ2hhbmdlIHRoaXMgdG8gYW4gYXBwcm9wcmlhdGUgbmFtZSAoMzAgY2hyLiBsaW1pdCkNCkNPTExFQ1RPUl9OQU1FID0gQ2VyblZNIGNsdXN0ZXIgYXQgXCQoQ09ORE9SX0hPU1QpDQojIyAgU2V0cyBob3cgb2Z0ZW4gdGhlIGNvbmRvcl9uZWdvdGlhdG9yIHN0YXJ0cyBhIG5lZ290aWF0aW9uIGN5Y2xlLg0KIyMgIEl0IGlzIGRlZmluZWQgaW4gc2Vjb25kcyBhbmQgZGVmYXVsdHMgdG8gNjAgKDEgbWludXRlKS4NCk5FR09USUFUT1JfSU5URVJWQUwgPSAyMA0KIyMgIFdoZW4gaXMgdGhpcyBtYWNoaW5lIHdpbGxpbmcgdG8gc3RhcnQgYSBqb2I/DQpTVEFSVCA9IFRSVUUNCiMjICBXaGVuIHRvIHN1c3BlbmQgYSBqb2I/DQpTVVNQRU5EID0gRkFMU0UNCiMjICBXaGVuIHRvIG5pY2VseSBzdG9wIGEgam9iPw0KIyMgIChhcyBvcHBvc2VkIHRvIGtpbGxpbmcgaXQgaW5zdGFudGFuZW91c2x5KQ0KUFJFRU1QVCA9IEZBTFNFDQojIyAgV2hlbiB0byBpbnN0YW50YW5lb3VzbHkga2lsbCBhIHByZWVtcHRpbmcgam9iDQojIyAgKGUuZy4gaWYgYSBqb2IgaXMgaW4gdGhlIHByZS1lbXB0aW5nIHN0YWdlIGZvciB0b28gbG9uZykNCktJTEwgPSBGQUxTRQ0KIyMgIERpc2FibGUgVUlEX0RPTUFJTiBjaGVjayB3aGVuIHN1Ym1pdCBhIGpvYg0KVFJVU1RfVUlEX0RPTUFJTiA9IFRSVUUNCg0KIyMgIFVzZSBUQ1AgaW5zdGVhZCBvZiBVRFAsIGFuZCBjYWNoZSBUQ1Agc29ja2V0cw0KIyMgIChtb3JlIHJlbGlhYmxlIG9uIHNvbWUgY2xvdWQgbmV0d29ya3MpDQpVUERBVEVfQ09MTEVDVE9SX1dJVEhfVENQID0gVHJ1ZQ0KQ09MTEVDVE9SX1NPQ0tFVF9DQUNIRV9TSVpFID0gMTAwMA0KDQojIyBBdm9pZCBjcmFzaGVzIG9mIHRoZSBjb2xsZWN0b3INCkNPTkRPUl9ERVZFTE9QRVJTX0NPTExFQ1RPUiA9IE5PTkUNCkVPRg0KIw0KL3Vzci9zYmluL2NvbmRvcl9zdG9yZV9jcmVkIC1wIDEyMzQ1IGFkZCAtZiAvZXRjL2NvbmRvci9jb25kb3JfY3JlZGVudGlhbA0KIw0Kc2VydmljZSBjb25kb3Igc3RhcnQNCg==
image_id = $IMAGE_ID
aws_secret_access_key = $EC2_SECRET_KEY
aws_access_key_id = $EC2_ACCESS_KEY
key_name = $KEY_NAME

[quota]
max_vms = $MAX_VMS
min_vms = $MIN_VMS

EOF
#
service elastiq start
mkdir /home/ubuntu/jobs/
mkdir /home/ubuntu/jobs/log/
mkdir /home/ubuntu/jobs/output/
mkdir /home/ubuntu/jobs/error/
cat<< EOF > /home/ubuntu/jobs/test.jdl
Universe = vanilla
Executable = /home/ubuntu/jobs/test.sh
Log = /home/ubuntu/jobs/log/test.log.\$(Cluster)\$(Process)
Output = /home/ubuntu/jobs/output/test.out.\$(Cluster)\$(Process)
Error = /home/ubuntu/jobs/error/test.err.\$(Cluster)\$(Process)
Queue 10
EOF
cat /tmp/test.sh > /home/ubuntu/jobs/test.sh
chown ubuntu:root -R /home/ubuntu/jobs/
chmod u+x -R /home/ubuntu/jobs/
#
cat<<EOF>/home/ubuntu/README.txt
Root user can't submit condor jobs.
You can submit jobs using ubuntu user and you can test condor using the test.jdl file [ condor_submit jobs/test.jdl ].
Good fun! :)
EOF
